generator client {
  provider        = "prisma-client-js"
  binaryTargets   = ["debian-openssl-3.0.x", "native"]
  previewFeatures = ["fullTextSearchPostgres"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Tag {
  id        String    @id @default(uuid())
  name      String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now()) @updatedAt
  postTags  PostTag[]
}

model PostTag {
  postId    String
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  tagId     String
  tag       Tag      @relation(fields: [tagId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@id([postId, tagId])
}

model Comment {
  id        String    @id @default(uuid())
  postId    String
  post      Post      @relation(fields: [postId], references: [id], onDelete: Cascade)
  userId    String
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  content   String    @db.Text
  replyOnId String?
  replyOn   Comment?  @relation("CommentReply", fields: [replyOnId], references: [id], onDelete: SetNull)
  replies   Comment[] @relation("CommentReply")
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now()) @updatedAt
}

model Like {
  id        String   @id @default(uuid())
  postId    String
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model Post {
  id          String      @id @default(uuid())
  title       String
  ownerId     String
  isVerified  Boolean     @default(false)
  owner       User        @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  description String?     @db.Text
  content     String      @db.Text
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @default(now()) @updatedAt
  postMedias  PostMedia[]
  likes       Like[]
  comments    Comment[]
  postTags    PostTag[]
}

model PostMedia {
  postId    String
  mediaId   String
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  media     Media    @relation(fields: [mediaId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@id([postId, mediaId])
}

model Media {
  id         String      @id @default(uuid())
  url        String      @unique
  type       MediaType
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @default(now()) @updatedAt
  postMedias PostMedia[]
  userMedias UserMedia[]
}

model Group {
  id        String   @id @default(uuid())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  users     User[]
}

model UserMedia {
  userId    String
  mediaId   String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  media     Media    @relation(fields: [mediaId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@id([userId, mediaId])
}

model User {
  id         String      @id @default(uuid())
  email      String      @unique
  password   String
  roleId     String
  firstName  String
  lastName   String
  groupId    String
  group      Group       @relation(fields: [groupId], references: [id], onDelete: Cascade)
  isActive   Boolean     @default(true)
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @default(now()) @updatedAt
  role       Role        @relation(fields: [roleId], references: [id], onDelete: NoAction)
  posts      Post[]
  userMedias UserMedia[]
  likes      Like[]
  comments   Comment[]
}

model Permission {
  id              String           @id @default(uuid())
  name            String           @unique
  title           String
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @default(now()) @updatedAt
  rolePermissions RolePermission[]
}

model Role {
  id              String           @id @default(uuid())
  name            String           @unique
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @default(now()) @updatedAt
  rolePermissions RolePermission[]
  users           User[]
}

model RolePermission {
  roleId       String
  permissionId String
  permission   Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  role         Role       @relation(fields: [roleId], references: [id], onDelete: Cascade)
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @default(now()) @updatedAt

  @@id([roleId, permissionId])
}

enum MediaType {
  AVATAR
  POST
}
